plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
def vertxVersion = '4.5.8'
mainClassName = 'com.varun.metrics.controller.MainVerticle'

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

dependencies {
    implementation "io.vertx:vertx-core:$vertxVersion"
    implementation "io.vertx:vertx-codegen:$vertxVersion:processor"
    implementation "io.vertx:vertx-config:$vertxVersion"
    implementation "io.vertx:vertx-rx-java2:$vertxVersion"
    implementation "io.vertx:vertx-service-proxy:$vertxVersion"
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.0'
    implementation 'com.google.guava:guava:30.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.12.0'


    annotationProcessor "io.vertx:vertx-codegen:$vertxVersion:processor"
    annotationProcessor "io.vertx:vertx-service-proxy:$vertxVersion"
    annotationProcessor "io.vertx:vertx-rx-java2-gen:$vertxVersion"

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    // test
    testImplementation 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testRuntimeOnly "io.vertx:vertx-junit5:$vertxVersion"
}
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
    finalizedBy jacocoTestReport
}
jar {
    manifest {
        attributes("Main-Class": mainClassName)
    }
}
run {
    args = ['run', mainClassName, "--launcher-class=$mainClassName"]
}
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/varun/metrics/controller",
                    "**/generated/**",
                    "**/reactivex/**",
                    "**/*VertxProxyHandler.class",
                    "**/*VertxEBProxy.class"
            ])
        }))
    }
}